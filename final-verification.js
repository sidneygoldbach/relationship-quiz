const { pool, dbType } = require('./database');

async function finalVerificationPostgreSQL() {
  try {
    console.log('üîç Verifica√ß√£o final do problema de op√ß√µes duplicadas...');
    
    // 1. Verificar total de op√ß√µes por idioma
    console.log('\nüìä Total de op√ß√µes por idioma:');
    const totalByLanguage = await pool.query(`
      SELECT q.country, COUNT(ao.*) as total_options
      FROM questions q
      LEFT JOIN answer_options ao ON q.id = ao.question_id
      GROUP BY q.country
      ORDER BY q.country
    `);
    
    totalByLanguage.rows.forEach(row => {
      console.log(`  ${row.country}: ${row.total_options} op√ß√µes`);
    });
    
    // 2. Verificar se h√° op√ß√µes duplicadas (mesmo texto, mesma pergunta)
    console.log('\nüîç Verificando op√ß√µes duplicadas (mesmo texto, mesma pergunta):');
    const duplicates = await pool.query(`
      SELECT question_id, option_text, COUNT(*) as count
      FROM answer_options
      GROUP BY question_id, option_text
      HAVING COUNT(*) > 1
      ORDER BY question_id, option_text
    `);
    
    if (duplicates.rows.length > 0) {
      console.log(`‚ö†Ô∏è Encontradas ${duplicates.rows.length} op√ß√µes duplicadas:`);
      duplicates.rows.forEach(row => {
        console.log(`  Pergunta ${row.question_id}: "${row.option_text}" (${row.count}x)`);
      });
    } else {
      console.log('‚úÖ N√£o h√° op√ß√µes duplicadas!');
    }
    
    // 3. Verificar se h√° op√ß√µes em idioma errado
    console.log('\nüîç Verificando op√ß√µes em idioma errado:');
    
    // Portugu√™s em perguntas inglesas
    const portugueseInEnglish = await pool.query(`
      SELECT COUNT(*) as count
      FROM answer_options ao
      JOIN questions q ON ao.question_id = q.id
      WHERE q.country = 'en_US' 
      AND (ao.option_text ILIKE '%prefiro%' 
           OR ao.option_text ILIKE '%preciso%' 
           OR ao.option_text ILIKE '%tento%' 
           OR ao.option_text ILIKE '%√†s vezes%'
           OR ao.option_text ILIKE '%comunica√ß√£o%'
           OR ao.option_text ILIKE '%confian√ßa%'
           OR ao.option_text ILIKE '%crescimento%'
           OR ao.option_text ILIKE '%abordar%'
           OR ao.option_text ILIKE '%processar%'
           OR ao.option_text ILIKE '%discutir%')
    `);
    
    // Ingl√™s em perguntas portuguesas
    const englishInPortuguese = await pool.query(`
      SELECT COUNT(*) as count
      FROM answer_options ao
      JOIN questions q ON ao.question_id = q.id
      WHERE q.country = 'pt_BR' 
      AND (ao.option_text ILIKE '%prefer%' 
           OR ao.option_text ILIKE '%need%' 
           OR ao.option_text ILIKE '%try%' 
           OR ao.option_text ILIKE '%sometimes%'
           OR ao.option_text ILIKE '%communication%'
           OR ao.option_text ILIKE '%trust%'
           OR ao.option_text ILIKE '%growth%'
           OR ao.option_text ILIKE '%address%'
           OR ao.option_text ILIKE '%process%'
           OR ao.option_text ILIKE '%discuss%')
    `);
    
    // Ingl√™s em perguntas espanholas
    const englishInSpanish = await pool.query(`
      SELECT COUNT(*) as count
      FROM answer_options ao
      JOIN questions q ON ao.question_id = q.id
      WHERE q.country = 'es_ES' 
      AND (ao.option_text ILIKE '%prefer%' 
           OR ao.option_text ILIKE '%need%' 
           OR ao.option_text ILIKE '%try%' 
           OR ao.option_text ILIKE '%sometimes%'
           OR ao.option_text ILIKE '%communication%'
           OR ao.option_text ILIKE '%trust%'
           OR ao.option_text ILIKE '%growth%')
    `);
    
    console.log(`  Portugu√™s em perguntas inglesas: ${portugueseInEnglish.rows[0].count}`);
    console.log(`  Ingl√™s em perguntas portuguesas: ${englishInPortuguese.rows[0].count}`);
    console.log(`  Ingl√™s em perguntas espanholas: ${englishInSpanish.rows[0].count}`);
    
    const totalMixed = parseInt(portugueseInEnglish.rows[0].count) + 
                      parseInt(englishInPortuguese.rows[0].count) + 
                      parseInt(englishInSpanish.rows[0].count);
    
    if (totalMixed === 0) {
      console.log('‚úÖ Todas as op√ß√µes est√£o nos idiomas corretos!');
    } else {
      console.log(`‚ö†Ô∏è Total de op√ß√µes em idioma errado: ${totalMixed}`);
    }
    
    // 4. Verificar distribui√ß√£o de op√ß√µes por pergunta
    console.log('\nüìä Distribui√ß√£o de op√ß√µes por pergunta (todas):');
    const optionsPerQuestion = await pool.query(`
      SELECT ao.question_id, q.country, q.question_text, COUNT(*) as total_options
      FROM answer_options ao
      JOIN questions q ON ao.question_id = q.id
      GROUP BY ao.question_id, q.country, q.question_text
      ORDER BY ao.question_id
    `);
    
    optionsPerQuestion.rows.forEach(row => {
      const shortText = row.question_text.length > 50 ? 
        row.question_text.substring(0, 50) + '...' : 
        row.question_text;
      console.log(`  Q${row.question_id} (${row.country}): ${row.total_options} op√ß√µes - "${shortText}"`);
    });
    
    // 5. Mostrar exemplos de op√ß√µes por idioma
    console.log('\nüìù Exemplos de op√ß√µes por idioma:');
    
    const examples = await pool.query(`
      SELECT q.country, ao.option_text
      FROM answer_options ao
      JOIN questions q ON ao.question_id = q.id
      WHERE ao.id IN (
        SELECT MIN(ao2.id)
        FROM answer_options ao2
        JOIN questions q2 ON ao2.question_id = q2.id
        GROUP BY q2.country
      )
      ORDER BY q.country
    `);
    
    examples.rows.forEach(row => {
      const shortText = row.option_text.length > 60 ? 
        row.option_text.substring(0, 60) + '...' : 
        row.option_text;
      console.log(`  ${row.country}: "${shortText}"`);
    });
    
    // 6. Verificar se h√° op√ß√µes √≥rf√£s
    console.log('\nüîç Verificando op√ß√µes √≥rf√£s (sem pergunta correspondente):');
    const orphanOptions = await pool.query(`
      SELECT COUNT(*) as count
      FROM answer_options ao
      LEFT JOIN questions q ON ao.question_id = q.id
      WHERE q.id IS NULL
    `);
    
    if (orphanOptions.rows[0].count > 0) {
      console.log(`‚ö†Ô∏è Encontradas ${orphanOptions.rows[0].count} op√ß√µes √≥rf√£s`);
    } else {
      console.log('‚úÖ N√£o h√° op√ß√µes √≥rf√£s!');
    }
    
    // 7. Resumo final
    console.log('\nüìã RESUMO FINAL:');
    console.log('================');
    
    const totalOptions = totalByLanguage.rows.reduce((sum, row) => sum + parseInt(row.total_options), 0);
    console.log(`Total de op√ß√µes: ${totalOptions}`);
    console.log(`Op√ß√µes duplicadas: ${duplicates.rows.length}`);
    console.log(`Op√ß√µes em idioma errado: ${totalMixed}`);
    console.log(`Op√ß√µes √≥rf√£s: ${orphanOptions.rows[0].count}`);
    
    if (duplicates.rows.length === 0 && totalMixed === 0 && parseInt(orphanOptions.rows[0].count) === 0) {
      console.log('\nüéâ PROBLEMA RESOLVIDO! Todas as op√ß√µes est√£o corretas!');
    } else {
      console.log('\n‚ö†Ô∏è Ainda h√° problemas que precisam ser corrigidos.');
    }
    
  } catch (error) {
    console.error('‚ùå Erro:', error.message);
  } finally {
    await pool.end();
  }
}

async function main() {
  console.log('üöÄ Iniciando verifica√ß√£o final...');
  
  try {
    if (dbType === 'postgresql') {
      console.log('üìä Usando PostgreSQL');
      await finalVerificationPostgreSQL();
    } else {
      console.log('üìä Usando SQLite - n√£o implementado');
    }
    
    console.log('\n‚úÖ Verifica√ß√£o conclu√≠da!');
  } catch (error) {
    console.error('‚ùå Erro durante a verifica√ß√£o:', error.message);
    process.exit(1);
  }
}

if (require.main === module) {
  main();
}

module.exports = { main };