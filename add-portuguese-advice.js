const { pool, dbType, initializeDatabase } = require('./database.js');

// Dados de advice em portugu√™s para cada tipo de personalidade
const portugueseAdviceData = {
  'communicator': {
    personalityAdvice: [
      'Voc√™ valoriza a comunica√ß√£o aberta e honesta em relacionamentos. Continue expressando seus sentimentos claramente.',
      'Sua habilidade de articular pensamentos e emo√ß√µes √© um grande trunfo. Use isso para fortalecer conex√µes.',
      'Pratique a escuta ativa - √†s vezes ouvir √© t√£o importante quanto falar.',
      'Seja paciente com parceiros que podem precisar de mais tempo para se expressar.',
      'Use sua comunica√ß√£o para resolver conflitos de forma construtiva, n√£o para vencer discuss√µes.'
    ],
    relationshipAdvice: [
      'Crie espa√ßos seguros para conversas dif√≠ceis com seu parceiro.',
      'Estabele√ßa check-ins regulares para discutir o estado do relacionamento.',
      'Pratique expressar gratid√£o e apre√ßo verbalmente todos os dias.',
      'Aprenda a comunicar necessidades sem soar como cr√≠ticas.',
      'Use "eu sinto" em vez de "voc√™ sempre" durante discuss√µes.'
    ]
  },
  'nurturer': {
    personalityAdvice: [
      'Sua natureza cuidadosa √© um presente. Lembre-se de tamb√©m cuidar de si mesmo.',
      'Voc√™ tem uma habilidade natural para fazer outros se sentirem amados e valorizados.',
      'Estabele√ßa limites saud√°veis para evitar o esgotamento emocional.',
      'Sua empatia √© poderosa - use-a para entender, n√£o para assumir responsabilidades dos outros.',
      'Celebre suas pr√≥prias conquistas, n√£o apenas as dos outros.'
    ],
    relationshipAdvice: [
      'Comunique suas pr√≥prias necessidades claramente - n√£o espere que seu parceiro adivinhe.',
      'Pratique receber cuidado e apoio, n√£o apenas dar.',
      'Estabele√ßa momentos regulares para atividades que nutrem voc√™.',
      'Aprenda a dizer "n√£o" quando necess√°rio para preservar sua energia.',
      'Incentive a independ√™ncia do seu parceiro enquanto oferece apoio.'
    ]
  },
  'harmonizer': {
    personalityAdvice: [
      'Sua busca por harmonia cria ambientes pac√≠ficos e acolhedores.',
      'Desenvolva confian√ßa para expressar suas opini√µes, mesmo quando diferem dos outros.',
      'Lembre-se que conflitos saud√°veis podem fortalecer relacionamentos.',
      'Sua habilidade de ver m√∫ltiplas perspectivas √© valiosa - use-a sabiamente.',
      'Pratique a assertividade gentil para expressar suas necessidades.'
    ],
    relationshipAdvice: [
      'Aprenda a navegar conflitos de forma construtiva em vez de evit√°-los.',
      'Comunique quando algo o incomoda antes que se torne um problema maior.',
      'Estabele√ßa compromissos que honrem tanto suas necessidades quanto as do parceiro.',
      'Pratique expressar prefer√™ncias pessoais sem medo de causar tens√£o.',
      'Crie rituais de conex√£o que promovam paz e intimidade no relacionamento.'
    ]
  },
  'independent': {
    personalityAdvice: [
      'Sua independ√™ncia √© uma for√ßa. Equilibre-a com vulnerabilidade em relacionamentos √≠ntimos.',
      'Voc√™ traz uma perspectiva √∫nica e valiosa para situa√ß√µes complexas.',
      'Pratique compartilhar seus pensamentos e sentimentos mais profundos.',
      'Sua autoconfian√ßa inspira outros - use-a para encorajar crescimento m√∫tuo.',
      'Lembre-se que pedir ajuda √© um sinal de for√ßa, n√£o fraqueza.'
    ],
    relationshipAdvice: [
      'Pratique a interdepend√™ncia - compartilhe responsabilidades e decis√µes.',
      'Crie espa√ßo para momentos de vulnerabilidade e intimidade emocional.',
      'Comunique suas necessidades de espa√ßo pessoal de forma clara e gentil.',
      'Inclua seu parceiro em seus planos e decis√µes importantes.',
      'Equilibre tempo sozinho com tempo de qualidade juntos.'
    ]
  },
  'loyalist': {
    personalityAdvice: [
      'Sua lealdade e comprometimento s√£o qualidades admir√°veis e raras.',
      'Confie em seus instintos - eles geralmente est√£o certos sobre pessoas e situa√ß√µes.',
      'Pratique a autocompaix√£o quando as coisas n√£o saem como planejado.',
      'Sua dedica√ß√£o inspira confian√ßa e seguran√ßa nos outros.',
      'Lembre-se de que √© okay questionar e reavaliar situa√ß√µes quando necess√°rio.'
    ],
    relationshipAdvice: [
      'Construa confian√ßa atrav√©s de a√ß√µes consistentes e comunica√ß√£o honesta.',
      'Crie tradi√ß√µes e rituais que fortale√ßam o v√≠nculo com seu parceiro.',
      'Pratique expressar preocupa√ß√µes de forma construtiva, n√£o defensiva.',
      'Estabele√ßa expectativas claras e realistas no relacionamento.',
      'Celebre marcos e conquistas juntos para fortalecer a conex√£o.'
    ]
  }
};

async function addPortugueseAdvice() {
  try {
    console.log('üáßüá∑ Adicionando advice em portugu√™s...');
    
    // Inicializar banco de dados
    await initializeDatabase();
    
    if (dbType === 'postgresql') {
      // Buscar tipos de personalidade em portugu√™s
      const ptTypesResult = await pool.query(
        'SELECT id, type_key, type_name FROM personality_types WHERE quiz_id = $1 AND country = $2',
        [1, 'pt_BR']
      );
      
      if (ptTypesResult.rows.length === 0) {
        console.log('‚ùå Nenhum tipo de personalidade em portugu√™s encontrado!');
        console.log('Execute primeiro o script add-portuguese-personality-types.js');
        return;
      }
      
      console.log(`Encontrados ${ptTypesResult.rows.length} tipos de personalidade em portugu√™s`);
      
      for (const type of ptTypesResult.rows) {
        console.log(`\nüìù Processando ${type.type_name} (${type.type_key})...`);
        
        // Verificar se j√° existe advice para este tipo
        const existingAdvice = await pool.query(
          'SELECT COUNT(*) as count FROM advice WHERE personality_type_id = $1',
          [type.id]
        );
        
        if (existingAdvice.rows[0].count > 0) {
          console.log(`  ‚ö†Ô∏è  J√° existe ${existingAdvice.rows[0].count} advice(s) para este tipo. Pulando...`);
          continue;
        }
        
        const adviceData = portugueseAdviceData[type.type_key];
        if (!adviceData) {
          console.log(`  ‚ùå Dados de advice n√£o encontrados para ${type.type_key}`);
          continue;
        }
        
        // Adicionar personality advice
        for (let i = 0; i < adviceData.personalityAdvice.length; i++) {
          await pool.query(
            'INSERT INTO advice (personality_type_id, advice_type, advice_text, advice_order, country) VALUES ($1, $2, $3, $4, $5)',
            [type.id, 'personality', adviceData.personalityAdvice[i], i + 1, 'pt_BR']
          );
        }
        
        // Adicionar relationship advice
        for (let i = 0; i < adviceData.relationshipAdvice.length; i++) {
          await pool.query(
            'INSERT INTO advice (personality_type_id, advice_type, advice_text, advice_order, country) VALUES ($1, $2, $3, $4, $5)',
            [type.id, 'relationship', adviceData.relationshipAdvice[i], i + 1, 'pt_BR']
          );
        }
        
        console.log(`  ‚úÖ Adicionados ${adviceData.personalityAdvice.length} personality advice e ${adviceData.relationshipAdvice.length} relationship advice`);
      }
      
    } else {
      // SQLite version
      console.log('Implementando vers√£o SQLite...');
      
      await new Promise((resolve, reject) => {
        pool.all(
          'SELECT id, type_key, type_name FROM personality_types WHERE quiz_id = ? AND country = ?',
          [1, 'pt_BR'],
          async (err, rows) => {
            if (err) {
              reject(err);
              return;
            }
            
            if (rows.length === 0) {
              console.log('‚ùå Nenhum tipo de personalidade em portugu√™s encontrado!');
              resolve();
              return;
            }
            
            console.log(`Encontrados ${rows.length} tipos de personalidade em portugu√™s`);
            
            for (const type of rows) {
              console.log(`\nüìù Processando ${type.type_name} (${type.type_key})...`);
              
              const adviceData = portugueseAdviceData[type.type_key];
              if (!adviceData) {
                console.log(`  ‚ùå Dados de advice n√£o encontrados para ${type.type_key}`);
                continue;
              }
              
              // Adicionar personality advice
              for (let i = 0; i < adviceData.personalityAdvice.length; i++) {
                await new Promise((resolveInsert, rejectInsert) => {
                  pool.run(
                    'INSERT INTO advice (personality_type_id, advice_type, advice_text, advice_order, country) VALUES (?, ?, ?, ?, ?)',
                    [type.id, 'personality', adviceData.personalityAdvice[i], i + 1, 'pt_BR'],
                    (err) => {
                      if (err) rejectInsert(err);
                      else resolveInsert();
                    }
                  );
                });
              }
              
              // Adicionar relationship advice
              for (let i = 0; i < adviceData.relationshipAdvice.length; i++) {
                await new Promise((resolveInsert, rejectInsert) => {
                  pool.run(
                    'INSERT INTO advice (personality_type_id, advice_type, advice_text, advice_order, country) VALUES (?, ?, ?, ?, ?)',
                    [type.id, 'relationship', adviceData.relationshipAdvice[i], i + 1, 'pt_BR'],
                    (err) => {
                      if (err) rejectInsert(err);
                      else resolveInsert();
                    }
                  );
                });
              }
              
              console.log(`  ‚úÖ Adicionados ${adviceData.personalityAdvice.length} personality advice e ${adviceData.relationshipAdvice.length} relationship advice`);
            }
            
            resolve();
          }
        );
      });
    }
    
    console.log('\nüéâ Advice em portugu√™s adicionado com sucesso!');
    
  } catch (error) {
    console.error('‚ùå Erro ao adicionar advice em portugu√™s:', error);
  } finally {
    if (dbType === 'postgresql') {
      await pool.end();
    } else {
      pool.close();
    }
  }
}

addPortugueseAdvice();