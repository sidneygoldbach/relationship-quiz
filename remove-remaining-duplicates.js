const { pool, dbType } = require('./database');

async function removeRemainingDuplicatesPostgreSQL() {
  try {
    console.log('üóëÔ∏è Removendo op√ß√µes duplicadas restantes...');
    
    // Identificar op√ß√µes em portugu√™s que ainda est√£o em perguntas inglesas
    console.log('\nüîç Identificando op√ß√µes em portugu√™s restantes em perguntas inglesas...');
    const remainingPortuguese = await pool.query(`
      SELECT ao.id, ao.question_id, ao.option_text, ao.country, q.country as question_country
      FROM answer_options ao
      JOIN questions q ON ao.question_id = q.id
      WHERE q.country = 'en_US' 
      AND (ao.option_text ILIKE '%prefiro%' 
           OR ao.option_text ILIKE '%preciso%' 
           OR ao.option_text ILIKE '%tento%' 
           OR ao.option_text ILIKE '%√†s vezes%'
           OR ao.option_text ILIKE '%comunica√ß√£o%'
           OR ao.option_text ILIKE '%confian√ßa%'
           OR ao.option_text ILIKE '%crescimento%'
           OR ao.option_text ILIKE '%experi√™ncias%'
           OR ao.option_text ILIKE '%entender%'
           OR ao.option_text ILIKE '%perspectiva%'
           OR ao.option_text ILIKE '%abordar%'
           OR ao.option_text ILIKE '%processar%'
           OR ao.option_text ILIKE '%discutir%')
      ORDER BY ao.question_id, ao.id
    `);
    
    console.log(`Encontradas ${remainingPortuguese.rows.length} op√ß√µes em portugu√™s restantes`);
    
    if (remainingPortuguese.rows.length > 0) {
      console.log('\nüìã Op√ß√µes que ser√£o removidas:');
      remainingPortuguese.rows.forEach(option => {
        console.log(`  ID ${option.id} - Q${option.question_id}: "${option.option_text}"`);
      });
      
      // Verificar se existem vers√µes equivalentes em ingl√™s
      console.log('\nüîç Verificando se existem vers√µes equivalentes em ingl√™s...');
      
      const translations = {
        'Prefiro abordar os problemas imediatamente e diretamente.': 'I prefer to address issues immediately and directly.',
        'Preciso de tempo para processar antes de discutir o problema.': 'I need time to process before discussing the problem.',
        'Tento encontrar um compromisso que funcione para todos.': 'I try to find a compromise that works for everyone.'
      };
      
      for (const option of remainingPortuguese.rows) {
        const englishVersion = translations[option.option_text];
        
        if (englishVersion) {
          // Verificar se a vers√£o em ingl√™s existe
          const englishExists = await pool.query(`
            SELECT id FROM answer_options 
            WHERE question_id = $1 AND option_text = $2
          `, [option.question_id, englishVersion]);
          
          if (englishExists.rows.length > 0) {
            console.log(`‚úÖ Vers√£o em ingl√™s existe para: "${option.option_text}"`);
            console.log(`   Ingl√™s: "${englishVersion}"`);
            
            // Remover a vers√£o em portugu√™s
            await pool.query(`DELETE FROM answer_options WHERE id = $1`, [option.id]);
            console.log(`üóëÔ∏è Removida op√ß√£o duplicada ID ${option.id}`);
          } else {
            console.log(`‚ö†Ô∏è Vers√£o em ingl√™s n√£o encontrada para: "${option.option_text}"`);
          }
        } else {
          console.log(`‚ö†Ô∏è Tradu√ß√£o n√£o mapeada para: "${option.option_text}"`);
          // Remover mesmo assim, pois est√° no lugar errado
          await pool.query(`DELETE FROM answer_options WHERE id = $1`, [option.id]);
          console.log(`üóëÔ∏è Removida op√ß√£o sem tradu√ß√£o mapeada ID ${option.id}`);
        }
      }
    }
    
    // Reorganizar option_order para todas as perguntas
    console.log('\nüîÑ Reorganizando ordem das op√ß√µes...');
    const allQuestions = await pool.query(`
      SELECT DISTINCT question_id 
      FROM answer_options 
      ORDER BY question_id
    `);
    
    for (const question of allQuestions.rows) {
      const options = await pool.query(`
        SELECT id 
        FROM answer_options 
        WHERE question_id = $1 
        ORDER BY id
      `, [question.question_id]);
      
      for (let i = 0; i < options.rows.length; i++) {
        await pool.query(`
          UPDATE answer_options 
          SET option_order = $1 
          WHERE id = $2
        `, [i, options.rows[i].id]);
      }
    }
    
    console.log('‚úÖ Ordem das op√ß√µes reorganizada');
    
    // Verificar resultado final
    console.log('\nüìä Verificando resultado final...');
    const finalCheck = await pool.query(`
      SELECT q.country, COUNT(ao.*) as total_options
      FROM questions q
      LEFT JOIN answer_options ao ON q.id = ao.question_id
      GROUP BY q.country
      ORDER BY q.country
    `);
    
    finalCheck.rows.forEach(row => {
      console.log(`  ${row.country}: ${row.total_options} op√ß√µes`);
    });
    
    // Verificar se ainda h√° op√ß√µes em idioma errado
    console.log('\nüîç Verifica√ß√£o final de idiomas misturados...');
    const finalMixedCheck = await pool.query(`
      SELECT COUNT(*) as count
      FROM answer_options ao
      JOIN questions q ON ao.question_id = q.id
      WHERE q.country = 'en_US' 
      AND (ao.option_text ILIKE '%prefiro%' 
           OR ao.option_text ILIKE '%preciso%' 
           OR ao.option_text ILIKE '%tento%' 
           OR ao.option_text ILIKE '%√†s vezes%'
           OR ao.option_text ILIKE '%comunica√ß√£o%'
           OR ao.option_text ILIKE '%confian√ßa%'
           OR ao.option_text ILIKE '%crescimento%'
           OR ao.option_text ILIKE '%abordar%'
           OR ao.option_text ILIKE '%processar%'
           OR ao.option_text ILIKE '%discutir%')
    `);
    
    if (finalMixedCheck.rows[0].count > 0) {
      console.log(`‚ö†Ô∏è Ainda h√° ${finalMixedCheck.rows[0].count} op√ß√µes em portugu√™s em perguntas inglesas`);
      
      // Mostrar quais s√£o
      const remaining = await pool.query(`
        SELECT ao.id, ao.question_id, ao.option_text
        FROM answer_options ao
        JOIN questions q ON ao.question_id = q.id
        WHERE q.country = 'en_US' 
        AND (ao.option_text ILIKE '%prefiro%' 
             OR ao.option_text ILIKE '%preciso%' 
             OR ao.option_text ILIKE '%tento%' 
             OR ao.option_text ILIKE '%√†s vezes%'
             OR ao.option_text ILIKE '%comunica√ß√£o%'
             OR ao.option_text ILIKE '%confian√ßa%'
             OR ao.option_text ILIKE '%crescimento%'
             OR ao.option_text ILIKE '%abordar%'
             OR ao.option_text ILIKE '%processar%'
             OR ao.option_text ILIKE '%discutir%')
      `);
      
      remaining.rows.forEach(row => {
        console.log(`  ID ${row.id} - Q${row.question_id}: "${row.option_text}"`);
      });
    } else {
      console.log('‚úÖ Todas as op√ß√µes est√£o nos idiomas corretos!');
    }
    
    // Mostrar estat√≠sticas por pergunta
    console.log('\nüìä Op√ß√µes por pergunta (primeiras 10):');
    const optionsPerQuestion = await pool.query(`
      SELECT ao.question_id, q.country, COUNT(*) as total_options
      FROM answer_options ao
      JOIN questions q ON ao.question_id = q.id
      GROUP BY ao.question_id, q.country
      ORDER BY ao.question_id
      LIMIT 10
    `);
    
    optionsPerQuestion.rows.forEach(row => {
      console.log(`  Pergunta ${row.question_id} (${row.country}): ${row.total_options} op√ß√µes`);
    });
    
  } catch (error) {
    console.error('‚ùå Erro:', error.message);
  } finally {
    await pool.end();
  }
}

async function main() {
  console.log('üöÄ Iniciando remo√ß√£o de duplicatas restantes...');
  
  try {
    if (dbType === 'postgresql') {
      console.log('üìä Usando PostgreSQL');
      await removeRemainingDuplicatesPostgreSQL();
    } else {
      console.log('üìä Usando SQLite - n√£o implementado');
    }
    
    console.log('\n‚úÖ Remo√ß√£o conclu√≠da!');
  } catch (error) {
    console.error('‚ùå Erro durante a remo√ß√£o:', error.message);
    process.exit(1);
  }
}

if (require.main === module) {
  main();
}

module.exports = { main };